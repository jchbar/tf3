<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>PHP Implementation of AES Advanced Encryption Standard in Counter Mode</title>
    <meta charset="utf-8">
    <meta name="author" content="Chris Veness, www.movable-type.co.uk">
    <meta name="keywords" content="AES advanced encryption algorithm standard counter mode operation PHP">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/normalize.css">
    <link rel="stylesheet" href="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/prettify.css">
    <link rel="stylesheet" href="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/base.css">
    <link rel="stylesheet" href="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/stylesheet.css">
    <link rel="stylesheet" href="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/mtl.css">
    <!--[if lt IE 9]><script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script><![endif]-->
    <script async="" src="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/analytics.js"></script><script src="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/jquery-3.js"></script>
    <script src="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/prettify.js">/* r224/r298 don't work! */</script>
    <script src="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/mtl.js">/* MTL utils */</script>
    <script>
        $(document).ready(function() {
            prettyPrint();
        });
    </script>
</head>

<body>

<header> <a href="http://www.movable-type.co.uk/"><img src="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/mtl.gif" alt="Movable Type Home Page"></a>
    <h1>Movable Type Scripts</h1>
    <hr>
    <h2>AES in PHP</h2>
</header>

<div id="content">
<p>This is a PHP version of <b>AES</b> (Advanced Encryption Standard). I created this PHP version
  as a server-side complement to my <a href="http://www.movable-type.co.uk/scripts/aes.html">JavaScript AES</a> implementation.</p>
<p>This version directly mirrors the JavaScript version; it differs in that PHP has Base64 encoding and
  UTF-8 encoding built-in, and has no unsigned-right-shift operator(!), but is otherwise a straightforward
  port, with syntactic differences and differently-named library functions. It is quite simple to compare
  the two versions side-by-side.</p>
<hr>
<p>An explanation of the operation of the algorithm is given with the <a href="http://www.movable-type.co.uk/scripts/aes.html">JavaScript version</a>.</p>
<p>See below for the source code of the PHP implementation. §ection numbers relate the code back to sections
  in the standard.</p>
<hr class="fullwidth">
<p id="licence"><a href="http://creativecommons.org/licenses/by/3.0/" style="float:right" target="_blank"><img alt="Creative Commons License" style="margin:4px" src="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/88x31.png"></a> I
  offer these formulæ &amp; scripts for free use and adaptation as my contribution to the open-source
  info-sphere from which I have received so much. You are welcome to re-use these scripts [under a simple <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">attribution</a> license or a <a href="http://www.gnu.org/copyleft/gpl.html" target="_blank">GPL</a> licence,
  without any warranty express or implied] provided solely that you retain my copyright notice and a
  link to this page.</p>
<p><a target="_blank" href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=3737803" style="float: right;"><img alt="Paypal donation" style="margin: 4px;" src="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/btn_donate_SM.gif"></a>
    If you would like to show your appreciation and support continued 
development of these scripts, I would most gratefully accept
    <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=3737803" title="Thank you!" target="_blank">donations</a>.</p>
<p>If you have any queries or find any problems, contact me at <span class="rtl">ku.oc.epyt-elbavom@cne-stpircs</span>.</p>
<p><span class="note"><i>© 2005-2014 Chris Veness</i></span> </p>
<hr class="fullwidth">

<pre class="fullwidth prettyprint"><span class="pun">&lt;?</span><span class="pln">php
</span><span class="com">/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */</span><span class="pln">
</span><span class="com">/*  AES implementation in PHP                                                                     */</span><span class="pln">
</span><span class="com">/*    (c) Chris Veness 2005-2014 www.movable-type.co.uk/scripts                                   */</span><span class="pln">
</span><span class="com">/*    Right of free use is granted for all commercial or non-commercial use under CC-BY licence.  */</span><span class="pln">
</span><span class="com">/*    No warranty of any form is offered.                                                         */</span><span class="pln">
</span><span class="com">/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */</span><span class="pln">

</span><span class="typ">Class</span><span class="pln"> </span><span class="typ">Aes</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="com">/**
     * AES Cipher function [§5.1]: encrypt 'input' with Rijndael algorithm
     *
     * @param input message as byte-array (16 bytes)
     * @param w     key schedule as 2D byte-array (Nr+1 x Nb bytes) -
     *              generated from the cipher key by keyExpansion()
     * @return      ciphertext as byte-array (16 bytes)
     */</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> cipher</span><span class="pun">(</span><span class="pln">$input</span><span class="pun">,</span><span class="pln"> $w</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        $Nb </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> </span><span class="com">// block size (in words): no of columns in state (fixed at 4 for AES)</span><span class="pln">
        $Nr </span><span class="pun">=</span><span class="pln"> count</span><span class="pun">(</span><span class="pln">$w</span><span class="pun">)</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> $Nb </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> </span><span class="com">// no of rounds: 10/12/14 for 128/192/256-bit keys</span><span class="pln">

        $state </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln"> </span><span class="com">// initialise 4xNb byte-array 'state' with input [§3.4]</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> $Nb</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> $state</span><span class="pun">[</span><span class="pln">$i </span><span class="pun">%</span><span class="pln"> </span><span class="lit">4</span><span class="pun">][</span><span class="pln">floor</span><span class="pun">(</span><span class="pln">$i </span><span class="pun">/</span><span class="pln"> </span><span class="lit">4</span><span class="pun">)]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $input</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">];</span><span class="pln">

        $state </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">addRoundKey</span><span class="pun">(</span><span class="pln">$state</span><span class="pun">,</span><span class="pln"> $w</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> $Nb</span><span class="pun">);</span><span class="pln">

        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$round </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> $round </span><span class="pun">&lt;</span><span class="pln"> $Nr</span><span class="pun">;</span><span class="pln"> $round</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">// apply Nr rounds</span><span class="pln">
            $state </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">subBytes</span><span class="pun">(</span><span class="pln">$state</span><span class="pun">,</span><span class="pln"> $Nb</span><span class="pun">);</span><span class="pln">
            $state </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">shiftRows</span><span class="pun">(</span><span class="pln">$state</span><span class="pun">,</span><span class="pln"> $Nb</span><span class="pun">);</span><span class="pln">
            $state </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">mixColumns</span><span class="pun">(</span><span class="pln">$state</span><span class="pun">,</span><span class="pln"> $Nb</span><span class="pun">);</span><span class="pln">
            $state </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">addRoundKey</span><span class="pun">(</span><span class="pln">$state</span><span class="pun">,</span><span class="pln"> $w</span><span class="pun">,</span><span class="pln"> $round</span><span class="pun">,</span><span class="pln"> $Nb</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        $state </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">subBytes</span><span class="pun">(</span><span class="pln">$state</span><span class="pun">,</span><span class="pln"> $Nb</span><span class="pun">);</span><span class="pln">
        $state </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">shiftRows</span><span class="pun">(</span><span class="pln">$state</span><span class="pun">,</span><span class="pln"> $Nb</span><span class="pun">);</span><span class="pln">
        $state </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">addRoundKey</span><span class="pun">(</span><span class="pln">$state</span><span class="pun">,</span><span class="pln"> $w</span><span class="pun">,</span><span class="pln"> $Nr</span><span class="pun">,</span><span class="pln"> $Nb</span><span class="pun">);</span><span class="pln">

        $output </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="lit">4</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> $Nb</span><span class="pun">);</span><span class="pln"> </span><span class="com">// convert state to 1-d array before returning [§3.4]</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> $Nb</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> $output</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $state</span><span class="pun">[</span><span class="pln">$i </span><span class="pun">%</span><span class="pln"> </span><span class="lit">4</span><span class="pun">][</span><span class="pln">floor</span><span class="pun">(</span><span class="pln">$i </span><span class="pun">/</span><span class="pln"> </span><span class="lit">4</span><span class="pun">)];</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> $output</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">


    </span><span class="com">/**
     * Xor Round Key into state S [§5.1.4].
     */</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> addRoundKey</span><span class="pun">(</span><span class="pln">$state</span><span class="pun">,</span><span class="pln"> $w</span><span class="pun">,</span><span class="pln"> $rnd</span><span class="pun">,</span><span class="pln"> $Nb</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$r </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $r </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $r</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$c </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $c </span><span class="pun">&lt;</span><span class="pln"> $Nb</span><span class="pun">;</span><span class="pln"> $c</span><span class="pun">++)</span><span class="pln"> $state</span><span class="pun">[</span><span class="pln">$r</span><span class="pun">][</span><span class="pln">$c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> $w</span><span class="pun">[</span><span class="pln">$rnd </span><span class="pun">*</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> $c</span><span class="pun">][</span><span class="pln">$r</span><span class="pun">];</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> $state</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/**
     * Apply SBox to state S [§5.1.1].
     */</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> subBytes</span><span class="pun">(</span><span class="pln">$s</span><span class="pun">,</span><span class="pln"> $Nb</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$r </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $r </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $r</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$c </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $c </span><span class="pun">&lt;</span><span class="pln"> $Nb</span><span class="pun">;</span><span class="pln"> $c</span><span class="pun">++)</span><span class="pln"> $s</span><span class="pun">[</span><span class="pln">$r</span><span class="pun">][</span><span class="pln">$c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">$sBox</span><span class="pun">[</span><span class="pln">$s</span><span class="pun">[</span><span class="pln">$r</span><span class="pun">][</span><span class="pln">$c</span><span class="pun">]];</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> $s</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/**
     * Shift row r of state S left by r bytes [§5.1.2].
     */</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> shiftRows</span><span class="pun">(</span><span class="pln">$s</span><span class="pun">,</span><span class="pln"> $Nb</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        $t </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="lit">4</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$r </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> $r </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $r</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$c </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $c </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $c</span><span class="pun">++)</span><span class="pln"> $t</span><span class="pun">[</span><span class="pln">$c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $s</span><span class="pun">[</span><span class="pln">$r</span><span class="pun">][(</span><span class="pln">$c </span><span class="pun">+</span><span class="pln"> $r</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> $Nb</span><span class="pun">];</span><span class="pln"> </span><span class="com">// shift into temp copy</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$c </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $c </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $c</span><span class="pun">++)</span><span class="pln"> $s</span><span class="pun">[</span><span class="pln">$r</span><span class="pun">][</span><span class="pln">$c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $t</span><span class="pun">[</span><span class="pln">$c</span><span class="pun">];</span><span class="pln"> </span><span class="com">// and copy back</span><span class="pln">
        </span><span class="pun">}</span><span class="pln"> </span><span class="com">// note that this will work for Nb=4,5,6, but not 7,8 (always 4 for AES):</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> $s</span><span class="pun">;</span><span class="pln"> </span><span class="com">// see fp.gladman.plus.com/cryptography_technology/rijndael/aes.spec.311.pdf</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/**
     * Combine bytes of each col of state S [§5.1.3].
     */</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> mixColumns</span><span class="pun">(</span><span class="pln">$s</span><span class="pun">,</span><span class="pln"> $Nb</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$c </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $c </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $c</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            $a </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="lit">4</span><span class="pun">);</span><span class="pln"> </span><span class="com">// 'a' is a copy of the current column from 's'</span><span class="pln">
            $b </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="lit">4</span><span class="pun">);</span><span class="pln"> </span><span class="com">// 'b' is a•{02} in GF(2^8)</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                $a</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $s</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">][</span><span class="pln">$c</span><span class="pun">];</span><span class="pln">
                $b</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $s</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">][</span><span class="pln">$c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0x80</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> $s</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">][</span><span class="pln">$c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> </span><span class="lit">0x011b</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> $s</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">][</span><span class="pln">$c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="com">// a[n] ^ b[n] is a•{03} in GF(2^8)</span><span class="pln">
            $s</span><span class="pun">[</span><span class="lit">0</span><span class="pun">][</span><span class="pln">$c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $b</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $a</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $b</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $a</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $a</span><span class="pun">[</span><span class="lit">3</span><span class="pun">];</span><span class="pln"> </span><span class="com">// 2*a0 + 3*a1 + a2 + a3</span><span class="pln">
            $s</span><span class="pun">[</span><span class="lit">1</span><span class="pun">][</span><span class="pln">$c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $a</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $b</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $a</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $b</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $a</span><span class="pun">[</span><span class="lit">3</span><span class="pun">];</span><span class="pln"> </span><span class="com">// a0 * 2*a1 + 3*a2 + a3</span><span class="pln">
            $s</span><span class="pun">[</span><span class="lit">2</span><span class="pun">][</span><span class="pln">$c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $a</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $a</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $b</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $a</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $b</span><span class="pun">[</span><span class="lit">3</span><span class="pun">];</span><span class="pln"> </span><span class="com">// a0 + a1 + 2*a2 + 3*a3</span><span class="pln">
            $s</span><span class="pun">[</span><span class="lit">3</span><span class="pun">][</span><span class="pln">$c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $a</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $b</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $a</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $a</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $b</span><span class="pun">[</span><span class="lit">3</span><span class="pun">];</span><span class="pln"> </span><span class="com">// 3*a0 + a1 + a2 + 2*a3</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> $s</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/**
     * Generate Key Schedule from Cipher Key [§5.2].
     *
     * Perform key expansion on cipher key to generate a key schedule.
     *
     * @param  key cipher key byte-array (16 bytes).
     * @return key schedule as 2D byte-array (Nr+1 x Nb bytes).
     */</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> keyExpansion</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        $Nb </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> </span><span class="com">// block size (in words): no of columns in state (fixed at 4 for AES)</span><span class="pln">
        $Nk </span><span class="pun">=</span><span class="pln"> count</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">)</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> </span><span class="com">// key length (in words): 4/6/8 for 128/192/256-bit keys</span><span class="pln">
        $Nr </span><span class="pun">=</span><span class="pln"> $Nk </span><span class="pun">+</span><span class="pln"> </span><span class="lit">6</span><span class="pun">;</span><span class="pln"> </span><span class="com">// no of rounds: 10/12/14 for 128/192/256-bit keys</span><span class="pln">

        $w </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
        $temp </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">

        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> $Nk</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            $r </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">[</span><span class="lit">4</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> $i</span><span class="pun">],</span><span class="pln"> $key</span><span class="pun">[</span><span class="lit">4</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> $i </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">],</span><span class="pln"> $key</span><span class="pun">[</span><span class="lit">4</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> $i </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pun">],</span><span class="pln"> $key</span><span class="pun">[</span><span class="lit">4</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> $i </span><span class="pun">+</span><span class="pln"> </span><span class="lit">3</span><span class="pun">]);</span><span class="pln">
            $w</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $r</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> $Nk</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$Nb </span><span class="pun">*</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$Nr </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">));</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            $w</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$t </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $t </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $t</span><span class="pun">++)</span><span class="pln"> $temp</span><span class="pun">[</span><span class="pln">$t</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $w</span><span class="pun">[</span><span class="pln">$i </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">][</span><span class="pln">$t</span><span class="pun">];</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">%</span><span class="pln"> $Nk </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                $temp </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">subWord</span><span class="pun">(</span><span class="kwd">self</span><span class="pun">::</span><span class="pln">rotWord</span><span class="pun">(</span><span class="pln">$temp</span><span class="pun">));</span><span class="pln">
                </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$t </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $t </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $t</span><span class="pun">++)</span><span class="pln"> $temp</span><span class="pun">[</span><span class="pln">$t</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">$rCon</span><span class="pun">[</span><span class="pln">$i </span><span class="pun">/</span><span class="pln"> $Nk</span><span class="pun">][</span><span class="pln">$t</span><span class="pun">];</span><span class="pln">
            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$Nk </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">6</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> $i </span><span class="pun">%</span><span class="pln"> $Nk </span><span class="pun">==</span><span class="pln"> </span><span class="lit">4</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                $temp </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">subWord</span><span class="pun">(</span><span class="pln">$temp</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$t </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $t </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $t</span><span class="pun">++)</span><span class="pln"> $w</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">][</span><span class="pln">$t</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $w</span><span class="pun">[</span><span class="pln">$i </span><span class="pun">-</span><span class="pln"> $Nk</span><span class="pun">][</span><span class="pln">$t</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> $temp</span><span class="pun">[</span><span class="pln">$t</span><span class="pun">];</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> $w</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/**
     * Apply SBox to 4-byte word w.
     */</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> subWord</span><span class="pun">(</span><span class="pln">$w</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> $w</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">$sBox</span><span class="pun">[</span><span class="pln">$w</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]];</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> $w</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/**
     * Rotate 4-byte word w left by one byte.
     */</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> rotWord</span><span class="pun">(</span><span class="pln">$w</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        $tmp </span><span class="pun">=</span><span class="pln"> $w</span><span class="pun">[</span><span class="lit">0</span><span class="pun">];</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> $w</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $w</span><span class="pun">[</span><span class="pln">$i </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">];</span><span class="pln">
        $w</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $tmp</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> $w</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">// sBox is pre-computed multiplicative inverse in GF(2^8) used in subBytes and keyExpansion [§5.1.1]</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> $sBox </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="pln">
        </span><span class="lit">0x63</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x7c</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x77</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x7b</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xf2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x6b</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x6f</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xc5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x30</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x01</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x67</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x2b</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xfe</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xd7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xab</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x76</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0xca</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x82</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xc9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x7d</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xfa</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x59</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x47</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xf0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xad</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xd4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xa2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xaf</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x9c</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xa4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x72</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xc0</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0xb7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xfd</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x93</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x26</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x36</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x3f</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xf7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xcc</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x34</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xa5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xe5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xf1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x71</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xd8</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x31</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x15</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0x04</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xc7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x23</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xc3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x18</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x96</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x05</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x9a</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x07</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x12</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x80</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xe2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xeb</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x27</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xb2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x75</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0x09</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x83</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x2c</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x1a</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x1b</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x6e</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x5a</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xa0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x52</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x3b</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xd6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xb3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x29</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xe3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x2f</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x84</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0x53</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xd1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xed</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x20</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xfc</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xb1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x5b</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x6a</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xcb</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xbe</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x39</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x4a</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x4c</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x58</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xcf</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0xd0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xef</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xaa</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xfb</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x43</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x4d</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x33</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x85</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x45</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xf9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x02</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x7f</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x50</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x3c</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x9f</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xa8</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0x51</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xa3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x40</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x8f</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x92</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x9d</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x38</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xf5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xbc</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xb6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xda</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x21</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x10</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xf3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xd2</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0xcd</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x0c</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x13</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xec</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x5f</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x97</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x44</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x17</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xc4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xa7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x7e</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x3d</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x64</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x5d</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x19</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x73</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0x60</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x81</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x4f</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xdc</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x22</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x2a</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x90</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x88</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x46</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xee</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xb8</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x14</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xde</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x5e</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x0b</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xdb</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0xe0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x32</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x3a</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x0a</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x49</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x06</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x24</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x5c</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xc2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xd3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xac</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x62</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x91</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x95</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xe4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x79</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0xe7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xc8</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x37</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x6d</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x8d</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xd5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x4e</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xa9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x6c</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x56</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xf4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xea</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x65</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x7a</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xae</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x08</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0xba</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x78</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x25</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x2e</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x1c</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xa6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xb4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xc6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xe8</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xdd</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x74</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x1f</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x4b</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xbd</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x8b</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x8a</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0x70</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x3e</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xb5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x66</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x48</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x03</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xf6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x0e</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x61</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x35</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x57</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xb9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x86</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xc1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x1d</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x9e</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0xe1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xf8</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x98</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x11</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x69</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xd9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x8e</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x94</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x9b</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x1e</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x87</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xe9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xce</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x55</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x28</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xdf</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">0x8c</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xa1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x89</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x0d</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xbf</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xe6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x42</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x68</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x41</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x99</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x2d</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x0f</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xb0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x54</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xbb</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x16</span><span class="pun">);</span><span class="pln">

    </span><span class="com">// rCon is Round Constant used for the Key Expansion [1st col is 2^(r-1) in GF(2^8)] [§5.2]</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> $rCon </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="pln">
        array</span><span class="pun">(</span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">),</span><span class="pln">
        array</span><span class="pun">(</span><span class="lit">0x01</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">),</span><span class="pln">
        array</span><span class="pun">(</span><span class="lit">0x02</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">),</span><span class="pln">
        array</span><span class="pun">(</span><span class="lit">0x04</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">),</span><span class="pln">
        array</span><span class="pun">(</span><span class="lit">0x08</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">),</span><span class="pln">
        array</span><span class="pun">(</span><span class="lit">0x10</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">),</span><span class="pln">
        array</span><span class="pun">(</span><span class="lit">0x20</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">),</span><span class="pln">
        array</span><span class="pun">(</span><span class="lit">0x40</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">),</span><span class="pln">
        array</span><span class="pun">(</span><span class="lit">0x80</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">),</span><span class="pln">
        array</span><span class="pun">(</span><span class="lit">0x1b</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">),</span><span class="pln">
        array</span><span class="pun">(</span><span class="lit">0x36</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">));</span><span class="pln">

</span><span class="pun">}</span><span class="pln">

</span><span class="com">/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */</span></pre>

<hr class="fullwidth">

<pre class="fullwidth prettyprint"><span class="pun">&lt;?</span><span class="pln">php
</span><span class="com">/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */</span><span class="pln">
</span><span class="com">/*  AES counter (CTR) mode implementation in PHP                                                  */</span><span class="pln">
</span><span class="com">/*    (c) Chris Veness 2005-2014 www.movable-type.co.uk/scripts                                   */</span><span class="pln">
</span><span class="com">/*    Right of free use is granted for all commercial or non-commercial use under CC-BY licence.  */</span><span class="pln">
</span><span class="com">/*    No warranty of any form is offered.                                                         */</span><span class="pln">
</span><span class="com">/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */</span><span class="pln">

</span><span class="typ">Class</span><span class="pln"> </span><span class="typ">AesCtr</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Aes</span><span class="pln">
</span><span class="pun">{</span><span class="pln">

    </span><span class="com">/**
     * Encrypt a text using AES encryption in Counter mode of operation
     *  - see http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf
     *
     * Unicode multi-byte character safe
     *
     * @param plaintext source text to be encrypted
     * @param password  the password to use to generate a key
     * @param nBits     number of bits to be used in the key (128, 192, or 256)
     * @return          encrypted text
     */</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> encrypt</span><span class="pun">(</span><span class="pln">$plaintext</span><span class="pun">,</span><span class="pln"> $password</span><span class="pun">,</span><span class="pln"> $nBits</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        $blockSize </span><span class="pun">=</span><span class="pln"> </span><span class="lit">16</span><span class="pun">;</span><span class="pln"> </span><span class="com">// block size fixed at 16 bytes / 128 bits (Nb=4) for AES</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!(</span><span class="pln">$nBits </span><span class="pun">==</span><span class="pln"> </span><span class="lit">128</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> $nBits </span><span class="pun">==</span><span class="pln"> </span><span class="lit">192</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> $nBits </span><span class="pun">==</span><span class="pln"> </span><span class="lit">256</span><span class="pun">))</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln"> </span><span class="com">// standard allows 128/192/256 bit keys</span><span class="pln">
        </span><span class="com">// note PHP (5) gives us plaintext and password in UTF8 encoding!</span><span class="pln">

        </span><span class="com">// use AES itself to encrypt password to get cipher key (using plain password as source for</span><span class="pln">
        </span><span class="com">// key expansion) - gives us well encrypted key</span><span class="pln">
        $nBytes </span><span class="pun">=</span><span class="pln"> $nBits </span><span class="pun">/</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln"> </span><span class="com">// no bytes in key</span><span class="pln">
        $pwBytes </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> $nBytes</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> $pwBytes</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> ord</span><span class="pun">(</span><span class="pln">substr</span><span class="pun">(</span><span class="pln">$password</span><span class="pun">,</span><span class="pln"> $i</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">))</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
        $key </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Aes</span><span class="pun">::</span><span class="pln">cipher</span><span class="pun">(</span><span class="pln">$pwBytes</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Aes</span><span class="pun">::</span><span class="pln">keyExpansion</span><span class="pun">(</span><span class="pln">$pwBytes</span><span class="pun">));</span><span class="pln">
        $key </span><span class="pun">=</span><span class="pln"> array_merge</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">,</span><span class="pln"> array_slice</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> $nBytes </span><span class="pun">-</span><span class="pln"> </span><span class="lit">16</span><span class="pun">));</span><span class="pln"> </span><span class="com">// expand key to 16/24/32 bytes long</span><span class="pln">

        </span><span class="com">// initialise 1st 8 bytes of counter block with nonce (NIST SP800-38A §B.2): [0-1] = millisec,</span><span class="pln">
        </span><span class="com">// [2-3] = random, [4-7] = seconds, giving guaranteed sub-ms uniqueness up to Feb 2106</span><span class="pln">
        $counterBlock </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
        $nonce </span><span class="pun">=</span><span class="pln"> floor</span><span class="pun">(</span><span class="pln">microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">);</span><span class="pln"> </span><span class="com">// timestamp: milliseconds since 1-Jan-1970</span><span class="pln">
        $nonceMs </span><span class="pun">=</span><span class="pln"> $nonce </span><span class="pun">%</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">;</span><span class="pln">
        $nonceSec </span><span class="pun">=</span><span class="pln"> floor</span><span class="pun">(</span><span class="pln">$nonce </span><span class="pun">/</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">);</span><span class="pln">
        $nonceRnd </span><span class="pun">=</span><span class="pln"> floor</span><span class="pun">(</span><span class="pln">rand</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xffff</span><span class="pun">));</span><span class="pln">

        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> $counterBlock</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">urs</span><span class="pun">(</span><span class="pln">$nonceMs</span><span class="pun">,</span><span class="pln"> $i </span><span class="pun">*</span><span class="pln"> </span><span class="lit">8</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> $counterBlock</span><span class="pun">[</span><span class="pln">$i </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">urs</span><span class="pun">(</span><span class="pln">$nonceRnd</span><span class="pun">,</span><span class="pln"> $i </span><span class="pun">*</span><span class="pln"> </span><span class="lit">8</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> $counterBlock</span><span class="pun">[</span><span class="pln">$i </span><span class="pun">+</span><span class="pln"> </span><span class="lit">4</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">urs</span><span class="pun">(</span><span class="pln">$nonceSec</span><span class="pun">,</span><span class="pln"> $i </span><span class="pun">*</span><span class="pln"> </span><span class="lit">8</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">

        </span><span class="com">// and convert it to a string to go on the front of the ciphertext</span><span class="pln">
        $ctrTxt </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> $ctrTxt </span><span class="pun">.=</span><span class="pln"> chr</span><span class="pun">(</span><span class="pln">$counterBlock</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]);</span><span class="pln">

        </span><span class="com">// generate key schedule - an expansion of the key into distinct Key Rounds for each round</span><span class="pln">
        $keySchedule </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Aes</span><span class="pun">::</span><span class="pln">keyExpansion</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">);</span><span class="pln">
        </span><span class="com">//print_r($keySchedule);</span><span class="pln">

        $blockCount </span><span class="pun">=</span><span class="pln"> ceil</span><span class="pun">(</span><span class="pln">strlen</span><span class="pun">(</span><span class="pln">$plaintext</span><span class="pun">)</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> $blockSize</span><span class="pun">);</span><span class="pln">
        $ciphertxt </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln"> </span><span class="com">// ciphertext as array of strings</span><span class="pln">

        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$b </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $b </span><span class="pun">&lt;</span><span class="pln"> $blockCount</span><span class="pun">;</span><span class="pln"> $b</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="com">// set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)</span><span class="pln">
            </span><span class="com">// done in two stages for 32-bit ops: using two words allows us to go past 2^32 blocks (68GB)</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$c </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $c </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $c</span><span class="pun">++)</span><span class="pln"> $counterBlock</span><span class="pun">[</span><span class="lit">15</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> $c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">urs</span><span class="pun">(</span><span class="pln">$b</span><span class="pun">,</span><span class="pln"> $c </span><span class="pun">*</span><span class="pln"> </span><span class="lit">8</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$c </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $c </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $c</span><span class="pun">++)</span><span class="pln"> $counterBlock</span><span class="pun">[</span><span class="lit">15</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> $c </span><span class="pun">-</span><span class="pln"> </span><span class="lit">4</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">urs</span><span class="pun">(</span><span class="pln">$b </span><span class="pun">/</span><span class="pln"> </span><span class="lit">0x100000000</span><span class="pun">,</span><span class="pln"> $c </span><span class="pun">*</span><span class="pln"> </span><span class="lit">8</span><span class="pun">);</span><span class="pln">

            $cipherCntr </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Aes</span><span class="pun">::</span><span class="pln">cipher</span><span class="pun">(</span><span class="pln">$counterBlock</span><span class="pun">,</span><span class="pln"> $keySchedule</span><span class="pun">);</span><span class="pln"> </span><span class="com">// -- encrypt counter block --</span><span class="pln">

            </span><span class="com">// block size is reduced on final block</span><span class="pln">
            $blockLength </span><span class="pun">=</span><span class="pln"> $b </span><span class="pun">&lt;</span><span class="pln"> $blockCount </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> $blockSize </span><span class="pun">:</span><span class="pln"> </span><span class="pun">(</span><span class="pln">strlen</span><span class="pun">(</span><span class="pln">$plaintext</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> $blockSize </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
            $cipherByte </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> $blockLength</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">// -- xor plaintext with ciphered counter byte-by-byte --</span><span class="pln">
                $cipherByte</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $cipherCntr</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> ord</span><span class="pun">(</span><span class="pln">substr</span><span class="pun">(</span><span class="pln">$plaintext</span><span class="pun">,</span><span class="pln"> $b </span><span class="pun">*</span><span class="pln"> $blockSize </span><span class="pun">+</span><span class="pln"> $i</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">));</span><span class="pln">
                $cipherByte</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> chr</span><span class="pun">(</span><span class="pln">$cipherByte</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            $ciphertxt</span><span class="pun">[</span><span class="pln">$b</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> implode</span><span class="pun">(</span><span class="str">''</span><span class="pun">,</span><span class="pln"> $cipherByte</span><span class="pun">);</span><span class="pln"> </span><span class="com">// escape troublesome characters in ciphertext</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="com">// implode is more efficient than repeated string concatenation</span><span class="pln">
        $ciphertext </span><span class="pun">=</span><span class="pln"> $ctrTxt </span><span class="pun">.</span><span class="pln"> implode</span><span class="pun">(</span><span class="str">''</span><span class="pun">,</span><span class="pln"> $ciphertxt</span><span class="pun">);</span><span class="pln">
        $ciphertext </span><span class="pun">=</span><span class="pln"> base64_encode</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> $ciphertext</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">


    </span><span class="com">/**
     * Decrypt a text encrypted by AES in counter mode of operation
     *
     * @param ciphertext source text to be decrypted
     * @param password   the password to use to generate a key
     * @param nBits      number of bits to be used in the key (128, 192, or 256)
     * @return           decrypted text
     */</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> decrypt</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">,</span><span class="pln"> $password</span><span class="pun">,</span><span class="pln"> $nBits</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        $blockSize </span><span class="pun">=</span><span class="pln"> </span><span class="lit">16</span><span class="pun">;</span><span class="pln"> </span><span class="com">// block size fixed at 16 bytes / 128 bits (Nb=4) for AES</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!(</span><span class="pln">$nBits </span><span class="pun">==</span><span class="pln"> </span><span class="lit">128</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> $nBits </span><span class="pun">==</span><span class="pln"> </span><span class="lit">192</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> $nBits </span><span class="pun">==</span><span class="pln"> </span><span class="lit">256</span><span class="pun">))</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln"> </span><span class="com">// standard allows 128/192/256 bit keys</span><span class="pln">
        $ciphertext </span><span class="pun">=</span><span class="pln"> base64_decode</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">);</span><span class="pln">

        </span><span class="com">// use AES to encrypt password (mirroring encrypt routine)</span><span class="pln">
        $nBytes </span><span class="pun">=</span><span class="pln"> $nBits </span><span class="pun">/</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln"> </span><span class="com">// no bytes in key</span><span class="pln">
        $pwBytes </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> $nBytes</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> $pwBytes</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> ord</span><span class="pun">(</span><span class="pln">substr</span><span class="pun">(</span><span class="pln">$password</span><span class="pun">,</span><span class="pln"> $i</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">))</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
        $key </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Aes</span><span class="pun">::</span><span class="pln">cipher</span><span class="pun">(</span><span class="pln">$pwBytes</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Aes</span><span class="pun">::</span><span class="pln">keyExpansion</span><span class="pun">(</span><span class="pln">$pwBytes</span><span class="pun">));</span><span class="pln">
        $key </span><span class="pun">=</span><span class="pln"> array_merge</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">,</span><span class="pln"> array_slice</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> $nBytes </span><span class="pun">-</span><span class="pln"> </span><span class="lit">16</span><span class="pun">));</span><span class="pln"> </span><span class="com">// expand key to 16/24/32 bytes long</span><span class="pln">

        </span><span class="com">// recover nonce from 1st element of ciphertext</span><span class="pln">
        $counterBlock </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
        $ctrTxt </span><span class="pun">=</span><span class="pln"> substr</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">8</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> $counterBlock</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> ord</span><span class="pun">(</span><span class="pln">substr</span><span class="pun">(</span><span class="pln">$ctrTxt</span><span class="pun">,</span><span class="pln"> $i</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">));</span><span class="pln">

        </span><span class="com">// generate key schedule</span><span class="pln">
        $keySchedule </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Aes</span><span class="pun">::</span><span class="pln">keyExpansion</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">);</span><span class="pln">

        </span><span class="com">// separate ciphertext into blocks (skipping past initial 8 bytes)</span><span class="pln">
        $nBlocks </span><span class="pun">=</span><span class="pln"> ceil</span><span class="pun">((</span><span class="pln">strlen</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">8</span><span class="pun">)</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> $blockSize</span><span class="pun">);</span><span class="pln">
        $ct </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$b </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $b </span><span class="pun">&lt;</span><span class="pln"> $nBlocks</span><span class="pun">;</span><span class="pln"> $b</span><span class="pun">++)</span><span class="pln"> $ct</span><span class="pun">[</span><span class="pln">$b</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> substr</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">,</span><span class="pln"> </span><span class="lit">8</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> $b </span><span class="pun">*</span><span class="pln"> $blockSize</span><span class="pun">,</span><span class="pln"> </span><span class="lit">16</span><span class="pun">);</span><span class="pln">
        $ciphertext </span><span class="pun">=</span><span class="pln"> $ct</span><span class="pun">;</span><span class="pln"> </span><span class="com">// ciphertext is now array of block-length strings</span><span class="pln">

        </span><span class="com">// plaintext will get generated block-by-block into array of block-length strings</span><span class="pln">
        $plaintxt </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">

        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$b </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $b </span><span class="pun">&lt;</span><span class="pln"> $nBlocks</span><span class="pun">;</span><span class="pln"> $b</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="com">// set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$c </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $c </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $c</span><span class="pun">++)</span><span class="pln"> $counterBlock</span><span class="pun">[</span><span class="lit">15</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> $c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">urs</span><span class="pun">(</span><span class="pln">$b</span><span class="pun">,</span><span class="pln"> $c </span><span class="pun">*</span><span class="pln"> </span><span class="lit">8</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$c </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $c </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"> $c</span><span class="pun">++)</span><span class="pln"> $counterBlock</span><span class="pun">[</span><span class="lit">15</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> $c </span><span class="pun">-</span><span class="pln"> </span><span class="lit">4</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">urs</span><span class="pun">((</span><span class="pln">$b </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">0x100000000</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> $c </span><span class="pun">*</span><span class="pln"> </span><span class="lit">8</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">

            $cipherCntr </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Aes</span><span class="pun">::</span><span class="pln">cipher</span><span class="pun">(</span><span class="pln">$counterBlock</span><span class="pun">,</span><span class="pln"> $keySchedule</span><span class="pun">);</span><span class="pln"> </span><span class="com">// encrypt counter block</span><span class="pln">

            $plaintxtByte </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> strlen</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">[</span><span class="pln">$b</span><span class="pun">]);</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="com">// -- xor plaintext with ciphered counter byte-by-byte --</span><span class="pln">
                $plaintxtByte</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $cipherCntr</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> ord</span><span class="pun">(</span><span class="pln">substr</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">[</span><span class="pln">$b</span><span class="pun">],</span><span class="pln"> $i</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">));</span><span class="pln">
                $plaintxtByte</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> chr</span><span class="pun">(</span><span class="pln">$plaintxtByte</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]);</span><span class="pln">

            </span><span class="pun">}</span><span class="pln">
            $plaintxt</span><span class="pun">[</span><span class="pln">$b</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> implode</span><span class="pun">(</span><span class="str">''</span><span class="pun">,</span><span class="pln"> $plaintxtByte</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="com">// join array of blocks into single plaintext string</span><span class="pln">
        $plaintext </span><span class="pun">=</span><span class="pln"> implode</span><span class="pun">(</span><span class="str">''</span><span class="pun">,</span><span class="pln"> $plaintxt</span><span class="pun">);</span><span class="pln">

        </span><span class="kwd">return</span><span class="pln"> $plaintext</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">


    </span><span class="com">/*
     * Unsigned right shift function, since PHP has neither &gt;&gt;&gt; operator nor unsigned ints
     *
     * @param a  number to be shifted (32-bit integer)
     * @param b  number of bits to shift a to the right (0..31)
     * @return   a right-shifted and zero-filled by b bits
     */</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> urs</span><span class="pun">(</span><span class="pln">$a</span><span class="pun">,</span><span class="pln"> $b</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        $a </span><span class="pun">&amp;=</span><span class="pln"> </span><span class="lit">0xffffffff</span><span class="pun">;</span><span class="pln">
        $b </span><span class="pun">&amp;=</span><span class="pln"> </span><span class="lit">0x1f</span><span class="pun">;</span><span class="pln"> </span><span class="com">// (bounds check)</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$a </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0x80000000</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> $b </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">// if left-most bit set</span><span class="pln">
            $a </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$a </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0x7fffffff</span><span class="pun">;</span><span class="pln"> </span><span class="com">//   right-shift one bit &amp; clear left-most bit</span><span class="pln">
            $a </span><span class="pun">=</span><span class="pln"> $a </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$b </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln"> </span><span class="com">//   remaining right-shifts</span><span class="pln">
        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">// otherwise</span><span class="pln">
            $a </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$a </span><span class="pun">&gt;&gt;</span><span class="pln"> $b</span><span class="pun">);</span><span class="pln"> </span><span class="com">//   use normal right-shift</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> $a</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

</span><span class="pun">}</span><span class="pln">

</span><span class="com">/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */</span></pre>
<hr class="fullwidth">
<p>The following Test Harness illustrates server-side encryption and decryption using the PHP AES script.
    Testing is simplified by temporarily setting the nonce to 0, so that the ciphertext is constant for a given plaintext.</p>
<p>It provides fields to enter the password and plaintext message, and then invokes itself to encrypt the
  plaintext and/or decrypt the ciphertext.</p>
<hr class="fullwidth">
<pre class="fullwidth prettyprint"><span class="pun">&lt;?</span><span class="pln">php
    </span><span class="kwd">require</span><span class="pln"> </span><span class="str">'aes.class.php'</span><span class="pun">;</span><span class="pln">     </span><span class="com">// AES PHP implementation</span><span class="pln">
    </span><span class="kwd">require</span><span class="pln"> </span><span class="str">'aesctr.class.php'</span><span class="pun">;</span><span class="pln">  </span><span class="com">// AES Counter Mode implementation</span><span class="pln">

    $timer </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">

    </span><span class="com">// initialise password &amp; plaintext if not set in post array</span><span class="pln">
    $pw </span><span class="pun">=</span><span class="pln"> empty</span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">[</span><span class="str">'pw'</span><span class="pun">])</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="str">'L0ck it up saf3'</span><span class="pln">              </span><span class="pun">:</span><span class="pln"> $_POST</span><span class="pun">[</span><span class="str">'pw'</span><span class="pun">];</span><span class="pln">
    $pt </span><span class="pun">=</span><span class="pln"> empty</span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">[</span><span class="str">'pt'</span><span class="pun">])</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="str">'pssst ... đon’t tell anyøne!'</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> $_POST</span><span class="pun">[</span><span class="str">'pt'</span><span class="pun">];</span><span class="pln">
    $cipher </span><span class="pun">=</span><span class="pln"> empty</span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">[</span><span class="str">'cipher'</span><span class="pun">])</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="str">''</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> $_POST</span><span class="pun">[</span><span class="str">'cipher'</span><span class="pun">];</span><span class="pln">
    $plain  </span><span class="pun">=</span><span class="pln"> empty</span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">[</span><span class="str">'plain'</span><span class="pun">])</span><span class="pln">  </span><span class="pun">?</span><span class="pln"> </span><span class="str">''</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> $_POST</span><span class="pun">[</span><span class="str">'plain'</span><span class="pun">];</span><span class="pln">

    </span><span class="com">// perform encryption/decryption as required</span><span class="pln">
    $encr </span><span class="pun">=</span><span class="pln"> empty</span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">[</span><span class="str">'encr'</span><span class="pun">])</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> $cipher </span><span class="pun">:</span><span class="pln"> </span><span class="typ">AesCtr</span><span class="pun">::</span><span class="pln">encrypt</span><span class="pun">(</span><span class="pln">$pt</span><span class="pun">,</span><span class="pln"> $pw</span><span class="pun">,</span><span class="pln"> </span><span class="lit">256</span><span class="pun">);</span><span class="pln">
    $decr </span><span class="pun">=</span><span class="pln"> empty</span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">[</span><span class="str">'decr'</span><span class="pun">])</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> $plain  </span><span class="pun">:</span><span class="pln"> </span><span class="typ">AesCtr</span><span class="pun">::</span><span class="pln">decrypt</span><span class="pun">(</span><span class="pln">$cipher</span><span class="pun">,</span><span class="pln"> $pw</span><span class="pun">,</span><span class="pln"> </span><span class="lit">256</span><span class="pun">);</span><span class="pln">
</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="dec">&lt;!DOCTYPE html&gt;</span><span class="pln">
</span><span class="tag">&lt;html</span><span class="pln"> </span><span class="atn">lang</span><span class="pun">=</span><span class="atv">"en"</span><span class="tag">&gt;</span><span class="pln">
</span><span class="tag">&lt;head&gt;</span><span class="pln">
</span><span class="tag">&lt;meta</span><span class="pln"> </span><span class="atn">http-equiv</span><span class="pun">=</span><span class="atv">"Content-Type"</span><span class="pln"> </span><span class="atn">content</span><span class="pun">=</span><span class="atv">"text/html; charset=utf-8"</span><span class="tag">&gt;</span><span class="pln">
</span><span class="tag">&lt;title&gt;</span><span class="pln">AES in PHP test harness</span><span class="tag">&lt;/title&gt;</span><span class="pln">
</span><span class="tag">&lt;/head&gt;</span><span class="pln">
</span><span class="tag">&lt;body&gt;</span><span class="pln">
</span><span class="tag">&lt;form</span><span class="pln"> </span><span class="atn">method</span><span class="pun">=</span><span class="atv">"post"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;table&gt;</span><span class="pln">
        </span><span class="tag">&lt;tr&gt;</span><span class="pln">
            </span><span class="tag">&lt;td&gt;</span><span class="pln">Password:</span><span class="tag">&lt;/td&gt;</span><span class="pln">
            </span><span class="tag">&lt;td&gt;</span><span class="pln">&lt;input type="text" name="pw" size="16" value="</span><span class="pun">&lt;?=</span><span class="pln"> $pw </span><span class="pun">?&gt;</span><span class="pln">"&gt;</span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
        </span><span class="tag">&lt;tr&gt;</span><span class="pln">
            </span><span class="tag">&lt;td&gt;</span><span class="pln">Plaintext:</span><span class="tag">&lt;/td&gt;</span><span class="pln">
            </span><span class="tag">&lt;td&gt;</span><span class="pln">&lt;input type="text" name="pt" size="40" value="</span><span class="pun">&lt;?=</span><span class="pln"> htmlspecialchars</span><span class="pun">(</span><span class="pln">$pt</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?&gt;</span><span class="pln">"&gt;</span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
        </span><span class="tag">&lt;tr&gt;</span><span class="pln">
            </span><span class="tag">&lt;td&gt;&lt;button</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"submit"</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"encr"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"Encrypt it"</span><span class="tag">&gt;</span><span class="pln">Encrypt it</span><span class="tag">&lt;/button&gt;&lt;/td&gt;</span><span class="pln">
            </span><span class="tag">&lt;td&gt;</span><span class="pln">&lt;input type="text" name="cipher" size="80" value="</span><span class="pun">&lt;?=</span><span class="pln"> $encr </span><span class="pun">?&gt;</span><span class="pln">"&gt;</span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
        </span><span class="tag">&lt;tr&gt;</span><span class="pln">
            </span><span class="tag">&lt;td&gt;&lt;button</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"submit"</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"decr"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"Decrypt it"</span><span class="tag">&gt;</span><span class="pln">Decrypt it</span><span class="tag">&lt;/button&gt;&lt;/td&gt;</span><span class="pln">
            </span><span class="tag">&lt;td&gt;</span><span class="pln">&lt;input type="text" name="plain" size="40" value="</span><span class="pun">&lt;?=</span><span class="pln"> htmlspecialchars</span><span class="pun">(</span><span class="pln">$decr</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?&gt;</span><span class="pln">"&gt;</span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
    </span><span class="tag">&lt;/table&gt;</span><span class="pln">
</span><span class="tag">&lt;/form&gt;</span><span class="pln">
</span><span class="tag">&lt;p&gt;</span><span class="pun">&lt;?=</span><span class="pln"> round</span><span class="pun">(</span><span class="pln">microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> $timer</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?&gt;</span><span class="pln">s</span><span class="tag">&lt;/p&gt;</span><span class="pln">
</span><span class="tag">&lt;/body&gt;</span><span class="pln">
</span><span class="tag">&lt;/html&gt;</span></pre>
<hr class="fullwidth">
<p>The following Test Harness illustrates a possible way of integrating JavaScript encoding with PHP decoding.
    Testing is simplified by temporarily setting the nonce to 0, so that the ciphertext is constant for a given plaintext.</p>
<p>The HTML file presents  fields to enter the  plaintext message. It uses the JavaScript
  version to encrypt the message client-side, and invokes the PHP file passing the ciphertext in the
  POST array. The PHP script then uses the PHP version to decrypt the ciphertext passed in the POST array
  and display it.</p>
<p>Of course, any real application would use a more sophisticated approach to password management!</p>
<hr class="fullwidth">
<p class="fullwidth"><i>aes-js-php.html</i>:</p>
<pre class="fullwidth prettyprint"><span class="dec">&lt;!DOCTYPE html&gt;</span><span class="pln">
</span><span class="tag">&lt;html</span><span class="pln"> </span><span class="atn">lang</span><span class="pun">=</span><span class="atv">"en"</span><span class="tag">&gt;</span><span class="pln">
</span><span class="tag">&lt;head&gt;</span><span class="pln">
</span><span class="tag">&lt;meta</span><span class="pln"> </span><span class="atn">http-equiv</span><span class="pun">=</span><span class="atv">"Content-Type"</span><span class="pln"> </span><span class="atn">content</span><span class="pun">=</span><span class="atv">"text/html; charset=utf-8"</span><span class="tag">&gt;</span><span class="pln">
</span><span class="tag">&lt;title&gt;</span><span class="pln">AES JavaScript+PHP test harness (client-side encrypt)</span><span class="tag">&lt;/title&gt;</span><span class="pln">
</span><span class="tag">&lt;script</span><span class="pln"> </span><span class="atn">src</span><span class="pun">=</span><span class="atv">"aes.js"</span><span class="tag">&gt;</span><span class="com">/* AES JavaScript implementation */</span><span class="tag">&lt;/script&gt;</span><span class="pln">
</span><span class="tag">&lt;script</span><span class="pln"> </span><span class="atn">src</span><span class="pun">=</span><span class="atv">"aes-ctr.js"</span><span class="tag">&gt;</span><span class="com">/* AES Counter Mode implementation */</span><span class="tag">&lt;/script&gt;</span><span class="pln">
</span><span class="tag">&lt;script</span><span class="pln"> </span><span class="atn">src</span><span class="pun">=</span><span class="atv">"base64.js"</span><span class="tag">&gt;</span><span class="com">/* Base64 encoding */</span><span class="tag">&lt;/script&gt;</span><span class="pln">
</span><span class="tag">&lt;script</span><span class="pln"> </span><span class="atn">src</span><span class="pun">=</span><span class="atv">"utf8.js"</span><span class="tag">&gt;</span><span class="com">/* UTF-8 encoding */</span><span class="tag">&lt;/script&gt;</span><span class="pln">
</span><span class="tag">&lt;/head&gt;</span><span class="pln">
</span><span class="tag">&lt;body&gt;</span><span class="pln">
</span><span class="com">&lt;!-- encrypt the message before submitting the form --&gt;</span><span class="pln">
</span><span class="tag">&lt;form</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"frm"</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"frm"</span><span class="pln"> </span><span class="atn">method</span><span class="pun">=</span><span class="atv">"post"</span><span class="pln"> </span><span class="atn">action</span><span class="pun">=</span><span class="atv">"aes-js-php.php"</span><span class="pln">
      </span><span class="atn">onsubmit</span><span class="pun">=</span><span class="atv">"</span><span class="pln">frm</span><span class="pun">.</span><span class="pln">message</span><span class="pun">.</span><span class="pln">value </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Aes</span><span class="pun">.</span><span class="typ">Ctr</span><span class="pun">.</span><span class="pln">encrypt</span><span class="pun">(</span><span class="pln">frm</span><span class="pun">.</span><span class="pln">message</span><span class="pun">.</span><span class="pln">value</span><span class="pun">,</span><span class="pln"> </span><span class="str">'L0ck it up saf3'</span><span class="pun">,</span><span class="pln"> </span><span class="lit">256</span><span class="pun">);</span><span class="atv">"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;p&gt;</span><span class="pln">Message: </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"text"</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"message"</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"message"</span><span class="pln"> </span><span class="atn">size</span><span class="pun">=</span><span class="atv">"40"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">""</span><span class="tag">&gt;&lt;/p&gt;</span><span class="pln">
  </span><span class="tag">&lt;p&gt;&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"submit"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"Encrypt it:"</span><span class="tag">&gt;&lt;/p&gt;</span><span class="pln">
</span><span class="tag">&lt;/form&gt;</span><span class="pln">
</span><span class="tag">&lt;/body&gt;</span><span class="pln">
</span><span class="tag">&lt;/html&gt;</span></pre>
<hr class="fullwidth">
<p class="fullwidth"><i>aes-js-php.php</i>:</p>
<pre class="fullwidth prettyprint"><span class="pun">&lt;?</span><span class="pln">php
  </span><span class="kwd">require</span><span class="pln"> </span><span class="str">'aes.class.php'</span><span class="pun">;</span><span class="pln">     </span><span class="com">// AES PHP implementation</span><span class="pln">
  </span><span class="kwd">require</span><span class="pln"> </span><span class="str">'aesctr.class.php'</span><span class="pun">;</span><span class="pln">  </span><span class="com">// AES Counter Mode implementation</span><span class="pln">
</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="dec">&lt;!DOCTYPE html&gt;</span><span class="pln">
</span><span class="tag">&lt;html</span><span class="pln"> </span><span class="atn">lang</span><span class="pun">=</span><span class="atv">"en"</span><span class="tag">&gt;</span><span class="pln">
</span><span class="tag">&lt;head&gt;</span><span class="pln">
</span><span class="tag">&lt;meta</span><span class="pln"> </span><span class="atn">http-equiv</span><span class="pun">=</span><span class="atv">"Content-Type"</span><span class="pln"> </span><span class="atn">content</span><span class="pun">=</span><span class="atv">"text/html; charset=utf-8"</span><span class="tag">&gt;</span><span class="pln">
</span><span class="tag">&lt;title&gt;</span><span class="pln">AES JavaScript+PHP test harness (server-side decrypt)</span><span class="tag">&lt;/title&gt;</span><span class="pln">
</span><span class="tag">&lt;/head&gt;</span><span class="pln">
</span><span class="tag">&lt;body&gt;</span><span class="pln">
</span><span class="com">&lt;!-- output the post array received and dectypt the message --&gt;</span><span class="pln">
</span><span class="tag">&lt;pre&gt;</span><span class="pln">$_POST: </span><span class="pun">&lt;?=</span><span class="pln"> print_r</span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?&gt;</span><span class="tag">&lt;/pre&gt;</span><span class="pln">
</span><span class="tag">&lt;pre&gt;</span><span class="pln">Plaintext: </span><span class="pun">&lt;?=</span><span class="pln"> </span><span class="typ">AesCtr</span><span class="pun">::</span><span class="pln">decrypt</span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">[</span><span class="str">'message'</span><span class="pun">],</span><span class="pln"> </span><span class="str">'L0ck it up saf3'</span><span class="pun">,</span><span class="pln"> </span><span class="lit">256</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?&gt;</span><span class="tag">&lt;/pre&gt;</span><span class="pln">
</span><span class="tag">&lt;/body&gt;</span><span class="pln">
</span><span class="tag">&lt;/html&gt;</span></pre>
<hr class="fullwidth">
Note that these PHP scripts use ‘<a href="http://www.malevolent.com/weblog/archive/2007/10/26/php-short-tags/" target="_blank">short
open tags</a>’ “<span class="code">&lt;?</span>” and “<span class="code">&lt;?=</span>”.
If your server doesn’t have short  tags enabled, use the full tags “<span class="code">&lt;?php</span>”
and
 “<span class="code">&lt;?php echo</span>” instead (see <a href="http://uk.php.net/manual/en/ini.core.php#ini.short-open-tag" target="_blank">short_open_tag
directive</a> and <a href="http://uk.php.net/echo" target="_blank">echo</a>).</div>

<script>
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="PHP%20Implementation%20of%20AES%20Advanced%20Encryption%20Standard%20in%20Counter%20Mode_files/ga.js" type="text/javascript"></script>
<script>
  try {
    var pageTracker = _gat._getTracker("UA-966502-1");
    pageTracker._trackPageview();
  } catch(err) {}
</script>


</body></html>